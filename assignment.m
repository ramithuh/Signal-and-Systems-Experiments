close all;clear all;L=100000;A=1;variance=1;threshold=0;bins=100;alpha=1;binary_seq = mod(reshape(randperm(1*L), 1, L), 2 ); %equiprobable random binary sequence%pulses=zeros(1,L); %%%% Generating Rectangular pulses based on the binary seq %%%for i=1:L  if(binary_seq(i)==1)    pulses(i)=A;  else    pulses(i)=-A;  endendN1 = sqrt(variance)*randn(1,L);   %%noiseN2 = sqrt(2*variance)*randn(1,L);N3 = sqrt(10*variance)*randn(1,L);N4 = sqrt(100*variance)*randn(1,L);R=pulses+N1; %% received signaldisp_n=100; %%display 100 samples %%%%%%% Plot Variance curves %%%%%%%% figure(1)  subplot(3,2,1)stairs(pulses(1:disp_n));title('Original Pulses')axis([0 inf -2*A 2*A])hold onsubplot(3,2,2)stairs(N1(1:disp_n),'LineStyle','-','color','r');title(['Noise with variance ',num2str(variance)])axis([0 inf -10*variance 10*variance])subplot(3,2,3)stairs(N2(1:disp_n),'LineStyle','-','color','r');title(['Noise with variance ',num2str(2*variance)])axis([0 inf -10*variance 10*variance])subplot(3,2,4)stairs(N3(1:disp_n),'LineStyle','-','color','r');title(['Noise with variance ',num2str(10*variance)])axis([0 inf -10*variance 10*variance])subplot(3,2,5)stairs(N4(1:disp_n),'LineStyle','-','color','r');title(['Noise with variance ',num2str(100*variance)])axis([0 inf -10*variance 10*variance])subplot(3,2,6)stairs(R(1:disp_n),'LineStyle','-','color','r');title(['Pulses + Noise of ',num2str(variance)])axis([0 inf -5*variance 5*variance]) %%%%%%% %%%%%%%print -depsc part.eps    %%%%% DECODING ######decoded=zeros(1,L);for i=1:L  if(R(i)>threshold)    decoded(i)=A;  else    decoded(i)=-A;  endendfigure(2)subplot(3,1,1)stairs(pulses(1:disp_n));title('Transmitted Pulses')axis([0 inf -2*A 2*A])subplot(3,1,2)stairs(R(1:disp_n),'LineStyle','-','color','r');title('Received Sequence','LineStyle','-','color','r')axis([0 inf -5*variance 5*variance])subplot(3,1,3)stairs(decoded(1:disp_n),'LineStyle','-','color','r');title('Decoded Sequence','LineStyle','-','color','r')axis([0 inf -2*variance 2*variance])%%%%%% For L=100,000%%   code to generate and plot the histogram of the received sequence taking the no of bins as 10.figure(3)subplot(1,2,1)draw_histogram(R,bins); ## my function ##subplot(1,2,2)hist(R,bins);title('Using Matlab hist() function')%%%%%% conditional pdf of Recieved signal       ##### %%%%%   given that transmitted with A amplitude ##### I1 = zeros(1,L); for i=4:5A=10^(i-4)*Apulses=pulses.*10^(i-4);R=pulses+N1; %%%% received signalfigure('name',['Effect of changing Amplitude to ',num2str(A)])conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins)  %%pulses,disp_n,A,R,endfigure('name','Effect of introducing Interference')A=1pulses=pulses.*0.1;N1 = sqrt(variance)*randn(1,L);   %%noiceI1 = sqrt(variance)*randn(1,L);   %%interferenceR  = pulses+N1+I1;conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) A=5pulses=pulses.*5;R  = pulses+N1+I1;conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) A=10pulses=pulses.*2;R  = pulses+N1+I1;conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) A=1pulses=pulses./10;alpha=2;figure('name',['Effect of changing Alpha to ',num2str(alpha),' with no Interference'])R  = pulses*alpha+N1;I1 = zeros(1,L);conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) alpha=5;figure('name',['Effect of changing Alpha to ',num2str(alpha),' with no Interference'])R  = pulses*alpha+N1;I1 = zeros(1,L);conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) alpha=10;figure('name',['Effect of changing Alpha to ',num2str(alpha),' with no Interference'])R  = pulses*alpha+N1;I1 = zeros(1,L);conditional_pdf_plot(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) cond(R,alpha,N1,I1,pulses,A,disp_n,variance,bins) 